install.packages("croptimizR")
install.packages("CroptmizR")
devtools::install_github("SticsRPacks/CroptimizR@*release")
devtools::install_github("SticsRPacks/CroptimizR@*release")
devtools::install_github("SticsRPacks/CroptimizR@*release")
remotes::install_github("SticsRPacks/CroptimizR@*release")
install.packages("rlang")
install.packages("rlang")
update.packages()
update.packages()
devtools::install_github("SticsRPacks/CroptimizR@*release")
install.packages("rlang")
install.packages("rlang")
devtools::install_github("SticsRPacks/CroptimizR@*release")
remotes::install_github("SticsRPacks/CroptimizR@*release")
install.packages("C:/Users/au595572/Desktop/CroptimizR-master.zip", repos = NULL, type = "win.binary")
library(`CroptimizR-master`)
library(`CroptimizR`)
usethis::browse_github_pat()
usethis::edit_r_environ()
library(`CroptimizR`)
remotes::install_github("SticsRPacks/CroptimizR@*release")
HMR...HMR_2020.2ndYear <- read.csv("C:/Users/au595572/OneDrive - Aarhus Universitet/NATEF/Data/HMR - HMR_2020-2ndYear.csv")
View(HMR...HMR_2020.2ndYear)
output <- output[which(complete.cases(output)),]
output <- read.csv("C:/Users/au595572/OneDrive - Aarhus Universitet/NATEF/Data/HMR - HMR_2020-2ndYear.csv")
View(HMR...HMR_2020.2ndYear)
output <- output[which(complete.cases(output)),]
output$Chamber <- as.factor(substr(output$Series,9,9))
output$date <- as.Date(substr(output$Series,11,20))
output$date <- as.POSIXct(paste0(substr(output$Series,11,20)," ",substr(output$Series,22,23),":00"))
output$f0 <- as.numeric(output$f0)
output$LR.f0 <- as.numeric(output$LR.f0)
#percentage LR
nrow(output)/length(output$Method=="LR")*100
output
library(doParallel)
library(foreach)
library(Matrix)
rm(list=ls())
cl=makeCluster(2, outfile = "report.txt")
registerDoParallel(cl)
result=foreach (n=1:10,.packages="Matrix" )%dopar%{
variable <-sparseMatrix(dims = c(100,150), i={1}, j={1},x=0)
cat(sprintf("task %d is complete \n",n))
assign(paste("variable",n,sep=""),variable)
return(variable)
}
stopCluster(cl)
getwd()
path1<-"O:\\Tech_AGRO\\Klima\\JWMP\\34_sites\\Output"
Trait<-list.files(path = path1)
load("O:/Tech_AGRO/Projekt/ProjKLIMA/_28399 AnaEE/LGR/Rdata/LGR.timecorr.Rdata")
LGR.timecorr
Sys.setlocale(category = "LC_ALL", locale = "English_United States.1252")
rm(list = ls())
labels_2 <- data.frame(matrix(nrow=12,ncol=4))
names(labels_2) = c("number","depth","subplot","species")
labels_2[1,] <- c("T1","-5","A1","2018 Festulolium")
labels_2[2,] <- c("T2","-20","A1","2018 Festulolium")
labels_2[3,] <- c("T3","-5","Out","2018 Festulolium")
labels_2[4,] <- c("T4","-20","Out","2018 Festulolium")
labels_2[5,] <- c("T5","-5","A2","2018 Festulolium")
labels_2[6,] <- c("T6","-20","A2","2018 Festulolium")
labels_2[7,] <- c("T7","-5","A3","2012 Festulolium")
labels_2[8,] <- c("T8","-20","A3","2012 Festulolium")
labels_2[9,] <- c("T9","-5","Out","2012 Festulolium")
labels_2[10,] <- c("T10","-20","Out","2012 Festulolium")
labels_2[11,] <- c("T11","-5","A4","2012 Festulolium")
labels_2[12,] <- c("T12","-20","A4","2012 Festulolium")
labels_1 <- data.frame(matrix(nrow=12,ncol=4))
names(labels_1) = c("number","depth","subplot","species")
labels_1[1,] <- c("T13","-5","Out","GrassClover")
labels_1[2,] <- c("T14","-20","Out","GrassClover")
labels_1[3,] <- c("T15","-5","Out","GrassClover")
labels_1[4,] <- c("T16","-20","Out","GrassClover")
labels_1[5,] <- c("T17","-5","Out","GrassClover")
labels_1[6,] <- c("T18","-20","Out","GrassClover")
labels_1[7,] <- c("T19","-5","A5","Triticale")
labels_1[8,] <- c("T20","-20","A5","Triticale")
labels_1[9,] <- c("T21","-5","Out","Triticale")
labels_1[10,] <- c("T22","-20","Out","Triticale")
labels_1[11,] <- c("T23","-5","A6","Triticale")
labels_1[12,] <- c("T24","-20","A6","Triticale")
# functions ------------------------------------------------------------
plotting_all_TDR_NEW <- function(x,label=NULL){
x <- x[,c(5:16,65)]
for(i in 1:12){
minimum=floor(min(as.numeric(x[,1]),as.numeric(x[,2]),as.numeric(x[,3]),as.numeric(x[,4]),as.numeric(x[,5]),as.numeric(x[,6]),as.numeric(x[,7]),as.numeric(x[,8]),as.numeric(x[,9]),as.numeric(x[,10]),as.numeric(x[,11]),as.numeric(x[,12]),na.rm = T))
maximum=ceiling(max(as.numeric(x[,1]),as.numeric(x[,2]),as.numeric(x[,3]),as.numeric(x[,4]),as.numeric(x[,5]),as.numeric(x[,6]),as.numeric(x[,7]),as.numeric(x[,8]),as.numeric(x[,9]),as.numeric(x[,10]),as.numeric(x[,11]),as.numeric(x[,12]),na.rm = T))
names(x) <- c(paste("T",seq(1:12),sep=""),"date")
jpeg(filename = paste(i,".jpg",sep=""))
plot(x$date,x[,i],xlab="Time",ylab= "%",type="b",ylim=c(minimum,maximum),main = label[i,])
dev.off()
}
}
plotting_all_temp <- function(x,label=NULL){
x <- x[,c(17:28,65)]
for(i in 1:12){
minimum=floor(min(as.numeric(x[,1]),as.numeric(x[,2]),as.numeric(x[,3]),as.numeric(x[,4]),as.numeric(x[,5]),as.numeric(x[,6]),as.numeric(x[,7]),as.numeric(x[,8]),as.numeric(x[,9]),as.numeric(x[,10]),as.numeric(x[,11]),as.numeric(x[,12]),na.rm = T))
maximum=ceiling(max(as.numeric(x[,1]),as.numeric(x[,2]),as.numeric(x[,3]),as.numeric(x[,4]),as.numeric(x[,5]),as.numeric(x[,6]),as.numeric(x[,7]),as.numeric(x[,8]),as.numeric(x[,9]),as.numeric(x[,10]),as.numeric(x[,11]),as.numeric(x[,12]),na.rm = T))
names(x) <- c(paste("T",seq(1:12),sep=""),"date")
jpeg(filename = paste(i,".jpg",sep=""))
plot(x$date,x[,i],xlab="Time",ylab= "Temperature (degrees C)",type="b",ylim=c(minimum,maximum),main = label[i,])
dev.off()
}
}
plotting_all_Quantum <- function(x){
for(i in 2:ncol(x)){
jpeg(filename = paste(i,".jpg",sep=""))
plot(x$date,x[,i],xlab="Time",ylab=names(x)[i],type="b")
dev.off()
}
}
# MARK 2.1 -------------------------------------------------------------
setwd("//DFS05.UNI.AU.DK//dfs//Tech_AGRO//Klima//JWMP//Meteo_figures_Foulum//github//ANAEE_DK_Foulum//Mark_2_1//TDR//")
Mark_2_1_TDR <- read.csv("//DFS05.UNI.AU.DK//dfs//Tech_AGRO//Foulumgaard\\AnaEE\\Campbell\\Mark2.1+Router_TDR_Field2_1.dat",skip=1,as.is=T)
Mark_2_1_TDR <- Mark_2_1_TDR[3:nrow(Mark_2_1_TDR),]
Mark_2_1_TDR$TIMESTAMP <- as.POSIXct(Mark_2_1_TDR$TIMESTAMP,format="%Y-%m-%d %H:%M:%OS")
data <- fRequent::zootodf(Mark_2_1_TDR[,2:ncol(Mark_2_1_TDR)])
data$date <- Mark_2_1_TDR$TIMESTAMP
date_now <- Sys.Date()
oneweek <- date_now-7
data$pure_date <- as.Date(data$date)+1
subdata <- data[max(which(data$pure_date==oneweek),1):max(which(data$pure_date==date_now)),]
