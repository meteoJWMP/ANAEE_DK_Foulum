print(a[j,"max"])
k=runif(n = 10000,min = a[j,3],max = a[j,4])
test=cbind(k,test)
}
hist(test[,1])
max(test[,1])
k=runif(n = 10000,min = a[j,3],max = a[j,4])
test=cbind(k,test)
k
test=NULL
for(j in 1:nrow(a)){
print(j)
print(a[j,"min"])
print(a[j,"max"])
k=runif(n = 10000,min = a[j,3],max = a[j,4])
test=cbind(k,test)
}
hist(test[,1])
max(test[,1])
max
test=NULL
for(j in 1:nrow(a)){
print(j)
print(a[j,"min"])
print(a[j,"max"])
k=runif(n = 100000,min = a[j,3],max = a[j,4])
test=cbind(k,test)
}
hist(test[,1])
max(test[,1])
max(test[,2])
max(test[2,])
max(test[1,])
k
max(k)
j=1
k=runif(n = 100000,min = a[j,3],max = a[j,4])
max(k)
hist(k)
str(k)
cbind(k,k)
m <- cbind(k,k)
m[1]
m[1,]
m[,1]
max(m[,1])
min(m[,1])
test=NULL
for(j in 1:nrow(a)){
print(j)
print(a[j,"min"])
print(a[j,"max"])
k=runif(n = 100000,min = a[j,3],max = a[j,4])
test=cbind(test,k)
}
max(test[1,])
max(test[,1])
hist(test[,1])
max(test[,2])
hist(test[,1])
max(test[,1])
max(test[,2])
fRequent::plot_per_column(test)
devtools::install_github(repo="jeroenpullens/fRequent",subdir = "fRequent")
names <- c("gram_KExt","gram_MaxGr","gram_MortFrLvmsleaf","gram_TOpt1Gr","gram_TOpt2Gr","gram_TmaxGr","eric_KExt","eric_MaxGr","eric_MortFrLvmsleaf","eric_TOpt1Gr","eric_TOpt2Gr","eric_TmaxGr","humm_MaxGr","humm_MortFrAcroshoot","humm_TMaxGr","humm_TOpt1Gr","humm_TOpt2Gr","lawn_MaxGr","lawn_MortFrAcroshoot","lawn_TMaxGr","lawn_TOpt1Gr","lawn_TOpt2Gr","holl_MaxGr","holl_MortFrAcroshoot","holl_TMaxGr","holl_TOpt1Gr","holl_TOpt2Gr","sd_NEE1","sd_WTD1")
values<-c(0.5,70,0.08,12,20,25,0.8,60,0.04,5,14,25,45,0.04,25,14,18,50,0.04,25,14,18,60,0.08,25,10,18,5,0.1)
min<-   c(0.1,0.1,0.1,0.6,0.6,0.6,0.1,0.1,0.1,0.6,0.6,0.6,0.1,0.1,0.6,0.6,0.6,0.1,0.1,0.6,0.6,0.6,0.1,0.6,0.6,0.6,0.6,0.1,0.1)*values
max<-  c(2,10,5,1.4,1.4,1.4,1.25,10,5,1.4,1.4,1.4,5,5,1.4,1.4,2.2,5,5,1.4,1.4,2.2,5,5,1.4,1.4,2.2,3,5)*values
a <- data.frame(names,values,min,max)
test=NULL
for(j in 1:nrow(a)){
print(j)
print(a[j,"min"])
print(a[j,"max"])
k=runif(n = 100000,min = a[j,3],max = a[j,4])
test=cbind(test,k)
}
fRequent::plot_per_column(test,hist=TRUE)
test=NULL
for(j in 1:nrow(a)){
print(j)
print(a[j,"min"])
print(a[j,"max"])
k=runif(n = 1000,min = a[j,3],max = a[j,4])
test=cbind(test,k)
}
a <- data.frame(names,values,min,max)
test=NULL
for(j in 1:nrow(a)){
k=runif(n = 1000,min = a[j,3],max = a[j,4])
test=cbind(test,k)
}
fRequent::plot_per_column(test,hist=TRUE)
hist(test[,1])
hist(test[,1],breaks = 1000)
hist(test[,1],breaks = 100)
hist(test[,1],breaks = 10)
hist(test[,1],breaks = 1)
hist(test[,1],breaks = 5)
min(test[â˜¼,1])
min(test[,1])
max(test[,1])
nrow(test)
test[,1]
test[1,]
library(hydroGOF)
hydroGOF::rmse()
sim <- 1:10
obs <- 1:10
gof(sim, obs)
sim <- 1:10
obs <- 1:10
a <- gof(sim, obs)
a
str(a)
which(a=="RMSE")
a[1]
a["RMSE"]
a["RMSE",]
a["NSE",]
b <- a["RMSE",]
b
b+1
sim <- 1:10
obs <- 1:10
a <- gof(sim, obs)["RMSE",1]
a
load("~/_Models/AgMIP_wheat/ROTS_step2/Daisy_rots_step2/CALIBRATION_AGMIP_CALIBRATION_Biomass_yield.Rdata")
fit.Biomass$optim$bestmem
600/50
600/20
switch("b", a = 1, b = , c = 3)
?switch
switch(1, invisible(pi), pi)
switch("lizard", lizard=,snake=,gator="reptile", frog=,toad="amphibian")
switch("frog", lizard=,snake=,gator="reptile", frog=,toad="amphibian")
Sys.setlocale("LC_MESSAGES", 'en_GB.UTF-8')
Sys.setenv(LANG = "en_US.UTF-8")
RVI <- read.csv("~/_Models/_28399 AnaEE/Licor8100/Data/RVI_2017_Festulolium.csv",sep=";",as.is=T)
RVI$Date <- as.Date(RVI$Date,format="%d/%m/%Y")
RVI$Date <- RVI$Date+365
plot(RVI,type="b",ylim=c(0,30))
Sys.setenv("LANGUAGE"="EN")
RVI <- read.csv("~/_Models/_28399 AnaEE/Licor8100/Data/RVI_2017_Festulolium.csv",sep=";",as.is=T)
RVI$Date <- as.Date(RVI$Date,format="%d/%m/%Y")
RVI$Date <- RVI$Date+365
plot(RVI,type="b",ylim=c(0,30))
setwd("D:/DK_uncertainty/Watem_in")
library(raster)
library(stringr)
ktc_combinations <- read.csv(file = "D:\\DK_uncertainty\\Watem_in\\ktc_NSE_median.csv",header = T,sep = ";")
setwd("D:/DK_uncertainty/Watem_in")
ktc_combinations <- read.csv(file = "D:\\DK_uncertainty\\Watem_in\\ktc_NSE_median.csv",header = T,sep = ";")
i=1
## Werodep
werodep <- raster(paste("D:\\DK_uncertainty\\Bornholm\\Watem_out\\DK_",ktc_combinations$Combi[i],sep="","_Werodep_in_m.rst")) ### Reads watem Werodep output with index based on ktc_combinations dataframe column Combi. When Sep="" is used, there are no spaces in filenames (paste0 would be an alternative)
## Werodep
werodep <- raster(paste("D:\\DK_uncertainty\\Bornholm\\Watem_out\\Bornholm_",ktc_combinations$Combi[i],sep="","_Werodep_in_m.rst")) ### Reads watem Werodep output with index based on ktc_combinations dataframe column Combi. When Sep="" is used, there are no spaces in filenames (paste0 would be an alternative)
werodep
plot(werodep)
values(werodep)[values(werodep) == 0] = NA   ### Zeros to NoData
plot(werodep)
tha_wt_werodep <- wt_werodep*12000 ## into t/ha/a
library(raster)
?stack
stack=raster()
stack_test=raster()
for(i in 1:nrow(ktc_combinations)){
## Werodep
werodep <- raster(paste("D:\\DK_uncertainty\\Bornholm\\Watem_out\\Bornholm_",ktc_combinations$Combi[i],sep="","_Werodep_in_m.rst")) ### Reads watem Werodep output with index based on ktc_combinations dataframe column Combi. When Sep="" is used, there are no spaces in filenames (paste0 would be an alternative)
values(werodep)[values(werodep) == 0] = NA   ### Zeros to NoData
tha_werodep <- werodep*12000 ## into t/ha/a
stack_test=stack(stack_test,tha_werodep)
gc() ## garbage collection
}
# for(i in 1:nrow(ktc_combinations)){
for(i in 1:2){
## Werodep
print(i)
werodep <- raster(paste("D:\\DK_uncertainty\\Bornholm\\Watem_out\\Bornholm_",ktc_combinations$Combi[i],sep="","_Werodep_in_m.rst")) ### Reads watem Werodep output with index based on ktc_combinations dataframe column Combi. When Sep="" is used, there are no spaces in filenames (paste0 would be an alternative)
values(werodep)[values(werodep) == 0] = NA   ### Zeros to NoData
tha_werodep <- werodep*12000 ## into t/ha/a
stack_test=stack(stack_test,tha_werodep)
gc() ## garbage collection
}
stack_test=raster()
# for(i in 1:nrow(ktc_combinations)){
for(i in 1:2){
## Werodep
print(i)
werodep <- raster(paste("D:\\DK_uncertainty\\Bornholm\\Watem_out\\Bornholm_",ktc_combinations$Combi[i],sep="","_Werodep_in_m.rst")) ### Reads watem Werodep output with index based on ktc_combinations dataframe column Combi. When Sep="" is used, there are no spaces in filenames (paste0 would be an alternative)
values(werodep)[values(werodep) == 0] = NA   ### Zeros to NoData
tha_werodep <- werodep*12000 ## into t/ha/a
stack_test=stack(stack_test,tha_werodep)
gc() ## garbage collection
}
stack_test
stack_test=stack()
# for(i in 1:nrow(ktc_combinations)){
for(i in 1:2){
## Werodep
print(i)
werodep <- raster(paste("D:\\DK_uncertainty\\Bornholm\\Watem_out\\Bornholm_",ktc_combinations$Combi[i],sep="","_Werodep_in_m.rst")) ### Reads watem Werodep output with index based on ktc_combinations dataframe column Combi. When Sep="" is used, there are no spaces in filenames (paste0 would be an alternative)
values(werodep)[values(werodep) == 0] = NA   ### Zeros to NoData
tha_werodep <- werodep*12000 ## into t/ha/a
stack_test=stack(stack_test,tha_werodep)
gc() ## garbage collection
}
stack_test
plot(stack_test)
stack_test=stack()
for(i in 1:nrow(ktc_combinations)){
# for(i in 1:2){
## Werodep
print(i)
werodep <- raster(paste("D:\\DK_uncertainty\\Bornholm\\Watem_out\\Bornholm_",ktc_combinations$Combi[i],sep="","_Werodep_in_m.rst")) ### Reads watem Werodep output with index based on ktc_combinations dataframe column Combi. When Sep="" is used, there are no spaces in filenames (paste0 would be an alternative)
values(werodep)[values(werodep) == 0] = NA   ### Zeros to NoData
tha_werodep <- werodep*12000 ## into t/ha/a
stack_test=stack(stack_test,tha_werodep)
gc() ## garbage collection
}
plot(stack_test)
x11()
plot(stack_test)
stack_test
nlayers(stack_test)
r_mean <- calc(stack_test, mean)
plot(r_mean)
stack_test[1]
stack_test[[1]]
stack_test_new=stack()
for(i in 1:nrow(ktc_combinations)){
stack_test_new=stack(stack_test_new,ktc_combinations$wt*100*stack_test[[i]]) }
# for(i in 1:nrow(ktc_combinations)){
for(i in 1:2)){
print(i)
stack_test_new=stack(stack_test_new,ktc_combinations$wt*100*stack_test[[i]]) }
stack_test_new=stack()
# for(i in 1:nrow(ktc_combinations)){
for(i in 1:2){
print(i)
stack_test_new=stack(stack_test_new,ktc_combinations$wt*100*stack_test[[i]])}
stack_test_new=stack()
# for(i in 1:nrow(ktc_combinations)){
for(i in 1:2){
print(i)
stack_test_new=stack(stack_test_new,ktc_combinations$wt[i]*100*stack_test[[i]])}
plot(stack_test_new)
stack_test_new=stack()
gc() ## garbage collection
stack_test_new=stack()
for(i in 1:nrow(ktc_combinations)){
print(i)
stack_test_new=stack(stack_test_new,ktc_combinations$wt[i]*100*stack_test[[i]])}
r_mean <- calc(stack_test_new, mean)
r_median <- calc(stack_test_new, median)
r_sd <- calc(stack_test_new, sd)
stack_test_new=stack()
for(i in 1:nrow(ktc_combinations)){
print(i)
stack_test_new=stack(stack_test_new,rep(ktc_combinations$wt[i]*100*stack_test[[i]]))}
rep(ktc_combinations$wt[i]*100*stack_test[[i]])
ktc_combinations$wt[i]*100
i
ktc_combinations$wt[i]*100*stack_test[[i]]
stack_test[[i]]
rep(stack_test[[1],2])
rep(stack_test[[1]],2)
replicate(stack_test[[1]],2)
stack(replicate(stack_test[[1]],2))
stack(replicate(2,stack_test[[1]]))
stack_test_new=stack()
for(i in 1:nrow(ktc_combinations)){
print(i)
stack_test_new=stack(stack_test_new,replicate(ktc_combinations$wt[i]*100,stack_test[[i]]))
}
ktc_combinations$wt[i]*100
ceiling(ktc_combinations$wt[i]*100)
ceiling(ktc_combinations$wt[27]*100)
sum(ceiling(ktc_combinations$wt*100))
round(ktc_combinations$wt[27]*100)
sum(round(ktc_combinations$wt*100))
ktc_combinations <- read.csv(file = "D:\\DK_uncertainty\\Watem_in\\ktc_NSE_median.csv",header = T,sep = ";")
stack_test_new=stack()
ktc_combinations$rounded[i]
replicate(ktc_combinations$rounded[i],stack_test[[i]])
stack_test_new=stack()
for(i in 1:nrow(ktc_combinations)){
print(i)
ktc_combinations$wt[27]=1
stack_test_new=stack(stack_test_new,replicate(ktc_combinations$rounded[i],stack_test[[i]]))
}
stack_test_new=stack(stack_test_new,stack(replicate(ktc_combinations$rounded[i],stack_test[[i]])))
stack_test_new=stack()
for(i in 1:nrow(ktc_combinations)){
print(i)
ktc_combinations$wt[27]=1
stack_test_new=stack(stack_test_new,stack(replicate(ktc_combinations$rounded[i],stack_test[[i]])))
}
str(stack_test_new)
stack(replicate(ktc_combinations$rounded[i],stack_test[[i]]))
stack_test_new=stack()
i=
1
stack_test_new=stack(stack_test_new,stack(replicate(ktc_combinations$rounded[i],stack_test[[i]])))
stack_test_new
=2
i=2
stack_test_new=stack(stack_test_new,stack(replicate(ktc_combinations$rounded[i],stack_test[[i]])))
stack_test_new
i=3
stack_test_new=stack(stack_test_new,stack(replicate(ktc_combinations$rounded[i],stack_test[[i]])))
stack_test_new
+writeRaster
?writeRaster
writeRaster(stack_test, filename = paste("E:\\DK_uncertainty\\Watem_out\\tha_stack_test"),format = "IDRISI",overwrite = TRUE,datatype="INT2S")
writeRaster(stack_test, filename = paste("E:\\DK_uncertainty\\Watem_out\\tha_stack_test"),format = "IDRISI",overwrite = TRUE)
writeRaster(stack_test, filename = paste("E:\\DK_uncertainty\\Watem_out\\tha_stack_test"),overwrite = TRUE,datatype="INT2S")
writeRaster(stack_test, "E:\\DK_uncertainty\\Watem_out\\tha_stack_test.grd",overwrite = TRUE,datatype="INT2S")
writeRaster(stack_test, "E:\\DK_uncertainty\\Watem_out\\tha_stack_test.grd",datatype="INT2S")
writeRaster(stack_test, "D:\\DK_uncertainty\\Watem_out\\tha_stack_test.grd",datatype="INT2S")
dev.off()
dev.off()
gc()
gc()
memory.limit(4000)
memory.limit(16000)
memory.limit(160000000)
memory.limit(1600000000000)
writeRaster(stack_test, "D:\\DK_uncertainty\\Watem_out\\tha_stack_test.grd",datatype="INT2S")
raster("D:\\DK_uncertainty\\Watem_out\\tha_stack_test.grd")
a <- raster("D:\\DK_uncertainty\\Watem_out\\tha_stack_test.grd")
plot(a)
plot(a[[2]])
str(a)
a
library(raster)
library(stringr)
setwd("D:/DK_uncertainty/Watem_in")
ktc_combinations <- read.csv(file = "D:\\DK_uncertainty\\Watem_in\\ktc_NSE_median.csv",header = T,sep = ";")
stack_test=stack()
for(i in 1:nrow(ktc_combinations)){
# for(i in 1:2){
## Werodep
print(i)
werodep <- raster(paste("D:\\DK_uncertainty\\Bornholm\\Watem_out\\Bornholm_",ktc_combinations$Combi[i],sep="","_Werodep_in_m.rst")) ### Reads watem Werodep output with index based on ktc_combinations dataframe column Combi. When Sep="" is used, there are no spaces in filenames (paste0 would be an alternative)
values(werodep)[values(werodep) == 0] = NA   ### Zeros to NoData
tha_werodep <- werodep*12000 ## into t/ha/a
stack_test=stack(stack_test,stack(replicate(ktc_combinations$rounded[i],tha_werodep))
gc() ## garbage collection
}
library(raster)
library(stringr)
setwd("D:/DK_uncertainty/Watem_in")
ktc_combinations <- read.csv(file = "D:\\DK_uncertainty\\Watem_in\\ktc_NSE_median.csv",header = T,sep = ";")
stack_test=stack()
for(i in 1:nrow(ktc_combinations)){
# for(i in 1:2){
## Werodep
print(i)
werodep <- raster(paste("D:\\DK_uncertainty\\Bornholm\\Watem_out\\Bornholm_",ktc_combinations$Combi[i],sep="","_Werodep_in_m.rst")) ### Reads watem Werodep output with index based on ktc_combinations dataframe column Combi. When Sep="" is used, there are no spaces in filenames (paste0 would be an alternative)
values(werodep)[values(werodep) == 0] = NA   ### Zeros to NoData
tha_werodep <- werodep*12000 ## into t/ha/a
stack_test=stack(stack_test,stack(replicate(ktc_combinations$rounded[i],tha_werodep)))
gc() ## garbage collection
}
stack_test
runDaisy <- function(RunFile, showLogFile = FALSE, PathToDaisy = "C:/Program Files/Daisy 5.49/bin/daisy.exe"){
#build the command
cmdToRun <- paste("\"", PathToDaisy, "\"", " \"", RunFile, "\"", sep="")
#run it
system(cmdToRun, show.output.on.console = showLogFile  )
}
runDaisy(RunFile = "C:\\Users\\au595572\\Documents\\_Models\\AgMIP_wheat\\34_sites\\Daisy\\big\\normal\\ARBA_1_1.dai",showLogFile = T,PathToDaisy = "C:\\Program Files\\Daisy 5.59\\bin\\daisy.exe")
runDaisy(RunFile = "C:\\Users\\au595572\\Documents\\_Models\\AgMIP_wheat\\34_sites\\Daisy\\big\\normal\\ARBA_1_1.dai",showLogFile = T,PathToDaisy = "C:\\Program Files\\Daisy 5.59\\bin\\daisy.exe")
runDaisy(RunFile = "C:\\Users\\au595572\\Documents\\_Models\\AgMIP_wheat\\34_sites\\Daisy\\big\\normal\\ARBA_1_1.dai",showLogFile = T,PathToDaisy = "C:\\Program Files\\Daisy 5.59\\bin\\daisy.exe")
runDaisy(RunFile = "C:\\Users\\au595572\\Documents\\_Models\\AgMIP_wheat\\34_sites\\Daisy\\big\\normal\\ARBA_1_1.dai",showLogFile = T,PathToDaisy = "C:\\Program Files\\Daisy 5.59\\bin\\daisy.exe")
remotes::install_github("MadsAlbertsen/ampvis2")
install.packages("glue")
install.packages("glue")
install.packages("glue")
install.packages("glue")
install.packages("glue")
remotes::install_github("MadsAlbertsen/ampvis2")
devtools::install_github(("MadsAlbertsen/ampvis2")
)
Sys.which("make")
Sys.which("make")
Sys.which("make")
Sys.which("make")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
path
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
remotes::install_github("MadsAlbertsen/ampvis2")
library(ampvis2)
Sys.setlocale(category = "LC_ALL", locale = "English_United States.1252")
rm(list = ls())
labels_2 <- data.frame(matrix(nrow=12,ncol=4))
names(labels_2) = c("number","depth","subplot","species")
labels_2[1,] <- c("T1","-5","A1","2018 Festulolium")
labels_2[2,] <- c("T2","-20","A1","2018 Festulolium")
labels_2[3,] <- c("T3","-5","Out","2018 Festulolium")
labels_2[4,] <- c("T4","-20","Out","2018 Festulolium")
labels_2[5,] <- c("T5","-5","A2","2018 Festulolium")
labels_2[6,] <- c("T6","-20","A2","2018 Festulolium")
labels_2[7,] <- c("T7","-5","A3","2012 Festulolium")
labels_2[8,] <- c("T8","-20","A3","2012 Festulolium")
labels_2[9,] <- c("T9","-5","Out","2012 Festulolium")
labels_2[10,] <- c("T10","-20","Out","2012 Festulolium")
labels_2[11,] <- c("T11","-5","A4","2012 Festulolium")
labels_2[12,] <- c("T12","-20","A4","2012 Festulolium")
labels_1 <- data.frame(matrix(nrow=12,ncol=4))
names(labels_1) = c("number","depth","subplot","species")
labels_1[1,] <- c("T13","-5","Out","GrassClover")
labels_1[2,] <- c("T14","-20","Out","GrassClover")
labels_1[3,] <- c("T15","-5","Out","GrassClover")
labels_1[4,] <- c("T16","-20","Out","GrassClover")
labels_1[5,] <- c("T17","-5","Out","GrassClover")
labels_1[6,] <- c("T18","-20","Out","GrassClover")
labels_1[7,] <- c("T19","-5","A5","Triticale")
labels_1[8,] <- c("T20","-20","A5","Triticale")
labels_1[9,] <- c("T21","-5","Out","Triticale")
labels_1[10,] <- c("T22","-20","Out","Triticale")
labels_1[11,] <- c("T23","-5","A6","Triticale")
labels_1[12,] <- c("T24","-20","A6","Triticale")
# functions ------------------------------------------------------------
plotting_all_TDR_NEW <- function(x,label=NULL){
x <- x[,c(5:16,65)]
for(i in 1:12){
minimum=floor(min(as.numeric(x[,1]),as.numeric(x[,2]),as.numeric(x[,3]),as.numeric(x[,4]),as.numeric(x[,5]),as.numeric(x[,6]),as.numeric(x[,7]),as.numeric(x[,8]),as.numeric(x[,9]),as.numeric(x[,10]),as.numeric(x[,11]),as.numeric(x[,12]),na.rm = T))
maximum=ceiling(max(as.numeric(x[,1]),as.numeric(x[,2]),as.numeric(x[,3]),as.numeric(x[,4]),as.numeric(x[,5]),as.numeric(x[,6]),as.numeric(x[,7]),as.numeric(x[,8]),as.numeric(x[,9]),as.numeric(x[,10]),as.numeric(x[,11]),as.numeric(x[,12]),na.rm = T))
names(x) <- c(paste("T",seq(1:12),sep=""),"date")
jpeg(filename = paste(i,".jpg",sep=""))
plot(x$date,x[,i],xlab="Time",ylab= "%",type="b",ylim=c(minimum,maximum),main = label[i,])
dev.off()
}
