dataall$NO3_50 <- as.numeric(dataall$NO3_50)
dataall$NO3_100 <- as.numeric(dataall$NO3_100)
dataall$NO3_150 <- as.numeric(dataall$NO3_150)
#plot the qqplot to visually check for normality
car::qqPlot(log(dataall$NO3_50))
car::qqPlot(log(dataall$NO3_100))
car::qqPlot(log(dataall$NO3_150))
# #check for normality
shapiro.test(log(dataall$NO3_50))
shapiro.test(log(dataall$NO3_100))
shapiro.test(log(dataall$NO3_150))
# From the output, the p-value > 0.05 implying that the distribution of the data are not significantly different
# from normal distribution. In other words, we can assume the normality.
#
#
##PER plot------
#make a dataset with the first column as log transformed data and the second with the number of replicate
all_columns <- as.data.frame(cbind(c(log(dataall$NO3_50),
log(dataall$NO3_100),
log(dataall$NO3_150)),
rep(1:8),rep(1:4,each=2)))
#make names for the dataframe
names(all_columns) <- c("NO3_leached","plot","treatment")
#make the replicates as factors.
all_columns$plot <- as.factor(all_columns$plot)
all_columns$treatment <- as.factor(all_columns$treatment)
##------
#test for equal variance
for(i in 1:4){
print(paste("Treatment is",i))
print(bartlett.test(all_columns$`NO3_leached`[which(all_columns$treatment==i)],
all_columns$plot[which(all_columns$treatment==i)]))
#p value above 0.05 , so there is no evidence to suggest that the variance in udvask is statistically
# significantly different for the three treatment groups.
TukeyHSD(aov(all_columns$NO3_leached[which(all_columns$treatment==i)]~all_columns$plot[which(all_columns$treatment==i)]))
plot(TukeyHSD(aov(all_columns$NO3_leached[which(all_columns$treatment==i)]~all_columns$plot[which(all_columns$treatment==i)])))
#So there is no statistical difference between the groups
readline(prompt="Press [enter] to continue")
}
##Per treatment------
#make a dataset with the first column as log transformed data and the second with the number of replicate
all_columns <- as.data.frame(cbind(c(log(dataall$NO3_50),
log(dataall$NO3_100),
log(dataall$NO3_150)),
rep(1:4,each=2)))
#make names for the dataframe
names(all_columns) <- c("NO3_leached","replicate")
#make the replicates as factors.
all_columns$replicate <- as.factor(all_columns$replicate)
##------
#test for equal variance
bartlett.test(all_columns$`NO3_leached`,all_columns$replicate)
#p value above 0.05 , so there is no evidence to suggest that the variance in udvask is statistically
# significantly different for the three treatment groups.
TukeyHSD(aov(all_columns$NO3_leached~all_columns$replicate))
plot(TukeyHSD(aov(all_columns$NO3_leached~all_columns$replicate)))
#So there is no statistical difference between the groups
##Per Depth------
#make a dataset with the first column as log transformed data and the second with the number of replicate
all_columns <- as.data.frame(cbind(c(log(dataall$NO3_50),
log(dataall$NO3_100),
log(dataall$NO3_150)),
rep(1:3,each=8),rep(1:4,each=2)))
#make names for the dataframe
names(all_columns) <- c("NO3_leached","depth","Treatment")
#make the replicates as factors.
all_columns$depth <- as.factor(all_columns$depth)
all_columns$Treatment <- as.factor(all_columns$Treatment)
##------
#test for equal variance
for(i in 1:4){
print(paste("Treatment is",i))
#test for equal variance
print(bartlett.test(all_columns$`NO3_leached`[which(all_columns$Treatment==i)],all_columns$depth[which(all_columns$Treatment==i)]))
#p value above 0.05 , so there is no evidence to suggest that the variance in udvask is statistically
# significantly different for the three treatment groups.
readline(prompt="Press [enter] to continue")
}
summary((lm(log(NO3_50)~Treatment+CC_50+CC_100+TOC_50-1,data=dataall)))
summary((lm(log(NO3_100)~Treatment+P_100+CC_100+TOC_100-1,data=dataall)))
summary((lm(log(NO3_150)~Treatment+P_150+CC_120+TOC_120-1,data=dataall)))
###2018 Period###
# library(readxl)
# data2019 <- read_excel("Nitrate_dataR2_1.xlsx",
#                        sheet = "2018data")
# View(data2018)
#convert the columns in the data to factor and numeric
data2018$Plot <-  as.factor(data2018$Plot)
data2018$Treatment <- as.factor(data2018$Treatment)
data2018$Period <- as.factor(data2018$Period)
data2018$P_50 <- as.numeric(data2018$P_50)
data2018$P_100 <- as.numeric(data2018$P_100)
data2018$P_150 <- as.numeric(data2018$P_150)
data2018$NO3_50 <- as.numeric(data2018$NO3_50)
data2018$NO3_100 <- as.numeric(data2018$NO3_100)
data2018$NO3_150 <- as.numeric(data2018$NO3_150)
data2018$CC_50 <- as.numeric(data2018$CC_50)
data2018$CC_100 <- as.numeric(data2018$CC_100)
data2018$CC_120 <- as.numeric(data2018$CC_120)
data2018$TOC_50 <- as.numeric(data2018$TOC_50)
data2018$TOC_100 <- as.numeric(data2018$TOC_100)
data2018$TOC_120 <- as.numeric(data2018$TOC_120)
#plot the qqplot to visually check for normality
car::qqPlot(log(data2018$NO3_50))
car::qqPlot(log(data2018$NO3_100))
car::qqPlot(log(data2018$NO3_150))
# #check for normality
shapiro.test(log(data2018$NO3_50))
shapiro.test(log(data2018$NO3_100))
shapiro.test(log(data2018$NO3_150))
# From the output, the p-value > 0.05 implying that the distribution of the data are not significantly
# different from normal distribution.
# In other words, we can assume the normality.
#
#
##------
#make a dataset with the first column as log transformed data and the second with the number of replicate
all_columns <- as.data.frame(cbind(c(log(data2018$NO3_50),log(data2018$NO3_100),log(data2018$NO3_150)),
rep(1:3,each=nrow(data2018))))
#make names for the dataframe
names(all_columns) <- c("NO3_leached","replicate")
#make the replicates as factors.
all_columns$replicate <- as.factor(all_columns$replicate)
##------
#test for equal variance
bartlett.test(all_columns$`NO3_leached`,all_columns$replicate)
#p value above 0.05 , so there is no evidence to suggest that the variance in udvask
# is statistically significantly different for the three treatment groups.
TukeyHSD(aov(all_columns$NO3_leached~all_columns$replicate))
plot(TukeyHSD(aov(all_columns$NO3_leached~all_columns$replicate)))
#So there is no statistical difference between the groups
##------
summary((lm(log(NO3_50)~Treatment+CC_50+CC_100+TOC_50-1,data=data2018)))
summary((lm(log(NO3_100)~Treatment+P_100+CC_100+TOC_100-1,data=data2018)))
summary((lm(log(NO3_150)~Treatment+P_150+CC_120+TOC_120-1,data=data2018)))
# 2019 Period
# library(readxl)
# data2019 <- read_excel("Nitrate_dataR2_1.xlsx",
#                        sheet = "2019data")
# View(data2019)
#convert the columns in the data to factor and numeric
data2019$Plot <-  as.factor(data2019$Plot)
data2019$Treatment <- as.factor(data2019$Treatment)
data2019$Period <- as.factor(data2019$Period)
data2019$P_50 <- as.numeric(data2019$P_50)
data2019$P_100 <- as.numeric(data2019$P_100)
data2019$P_150 <- as.numeric(data2019$P_150)
data2019$NO3_50 <- as.numeric(data2019$NO3_50)
data2019$NO3_100 <- as.numeric(data2019$NO3_100)
data2019$NO3_150 <- as.numeric(data2019$NO3_150)
data2019$CC_50 <- as.numeric(data2019$CC_50)
data2019$CC_100 <- as.numeric(data2019$CC_100)
data2019$CC_120 <- as.numeric(data2019$CC_120)
data2019$TOC_50 <- as.numeric(data2019$TOC_50)
data2019$TOC_100 <- as.numeric(data2019$TOC_100)
data2019$TOC_120 <- as.numeric(data2019$TOC_120)
#plot the qqplot to visually check for normality
car::qqPlot(log(data2019$NO3_50))
car::qqPlot(log(data2019$NO3_100))
car::qqPlot(log(data2019$NO3_150))
# #check for normality
shapiro.test(log(data2019$NO3_50))
shapiro.test(log(data2019$NO3_100))
shapiro.test(log(data2019$NO3_150))
# #From the output, the p-value > 0.05 implying that the distribution of the data are not significantly
# different from normal distribution.
# In other words, we can assume the normality.
#
#
##------
#make a dataset with the first column as log transformed data and the second with the number of replicate
all_columns <- as.data.frame(cbind(c(log(data2019$NO3_50),
log(data2019$NO3_100),
log(data2019$NO3_150)),
rep(1:3,each=nrow(data2019))))
#make names for the dataframe
names(all_columns) <- c("NO3_leached","replicate")
#make the replicates as factors.
all_columns$replicate <- as.factor(all_columns$replicate)
##------
#test for equal variance
bartlett.test(all_columns$`NO3_leached`,all_columns$replicate)
#p value above 0.05 , so there is no evidence to suggest that the variance in udvask is statistically
# significantly different for the three treatment groups.
TukeyHSD(aov(all_columns$NO3_leached~all_columns$replicate))
plot(TukeyHSD(aov(all_columns$NO3_leached~all_columns$replicate)))
#So there is no statistical difference between the groups
##------
summary((lm(log(NO3_50)~Treatment+CC_50+CC_100+TOC_50-1,data=data2019)))
summary((lm(log(NO3_100)~Treatment+P_100+CC_100+TOC_100-1,data=data2019)))
summary((lm(log(NO3_150)~Treatment+P_150+CC_120+TOC_120-1,data=data2019)))
mean_50<-with(dataall, tapply(dataall$NO3_50, dataall$Treatment, mean))
mean_100<-with(dataall, tapply(dataall$NO3_100, dataall$Treatment, mean))
mean_150<-with(dataall, tapply(dataall$NO3_150, dataall$Treatment, mean))
par(mfrow=c(3,1))
sd_50<-with(dataall, tapply(dataall$NO3_50, dataall$Treatment, sd))
sd_100<-with(dataall, tapply(dataall$NO3_100, dataall$Treatment, sd))
sd_150<-with(dataall, tapply(dataall$NO3_150, dataall$Treatment, sd))
mean <- barplot(cbind(mean_50,mean_100,mean_150),beside = T,ylim = c(0,350),
xaxt='n', ann=FALSE,yaxt='n')
grid()
par(new=T)
se(1,2,3)
?sd
stderr(1,2,3)
stderr(c(1,2,3))
?stderr
se <- function(x, ...) sqrt(var(x, ...)/length(x))
se(c(1,2,3))
par(mfrow=c(3,1))
mean_50<-with(dataall, tapply(dataall$NO3_50, dataall$Treatment, mean))
mean_100<-with(dataall, tapply(dataall$NO3_100, dataall$Treatment, mean))
mean_150<-with(dataall, tapply(dataall$NO3_150, dataall$Treatment, mean))
se <- function(x, ...) sqrt(var(x, ...)/length(x))
sd_50<-with(dataall, tapply(dataall$NO3_50, dataall$Treatment, sd))
sd_100<-with(dataall, tapply(dataall$NO3_100, dataall$Treatment, sd))
sd_150<-with(dataall, tapply(dataall$NO3_150, dataall$Treatment, sd))
se_50<-with(dataall, tapply(dataall$NO3_50, dataall$Treatment, se))
se_100<-with(dataall, tapply(dataall$NO3_100, dataall$Treatment, se))
se_150<-with(dataall, tapply(dataall$NO3_150, dataall$Treatment, se))
mean <- barplot(cbind(mean_50,mean_100,mean_150),beside = T,ylim = c(0,350),
xlab="depth",names.arg = c("50 cm", "100 cm","150 cm"),ylab="NO3")
arrows(mean, cbind(mean_50,mean_100,mean_150)-cbind(se_50,se_100,se_150),
mean, cbind(mean_50,mean_100,mean_150)+cbind(se_50,se_100,se_150),angle=90,code=3)
legend("topleft",
legend = levels(dataall$Treatment),
fill = grey.colors(4),horiz = T)
box()
par(mfrow=c(3,1))
mean_50<-with(dataall, tapply(dataall$NO3_50, dataall$Treatment, mean))
mean_100<-with(dataall, tapply(dataall$NO3_100, dataall$Treatment, mean))
mean_150<-with(dataall, tapply(dataall$NO3_150, dataall$Treatment, mean))
se <- function(x, ...) sqrt(var(x, ...)/length(x))
sd_50<-with(dataall, tapply(dataall$NO3_50, dataall$Treatment, sd))
sd_100<-with(dataall, tapply(dataall$NO3_100, dataall$Treatment, sd))
sd_150<-with(dataall, tapply(dataall$NO3_150, dataall$Treatment, sd))
se_50<-with(dataall, tapply(dataall$NO3_50, dataall$Treatment, se))
se_100<-with(dataall, tapply(dataall$NO3_100, dataall$Treatment, se))
se_150<-with(dataall, tapply(dataall$NO3_150, dataall$Treatment, se))
mean <- barplot(cbind(mean_50,mean_100,mean_150),beside = T,ylim = c(0,350),
xaxt='n', ann=FALSE,yaxt='n')
grid()
par(new=T)
mean <- barplot(cbind(mean_50,mean_100,mean_150),beside = T,ylim = c(0,350),
xlab="depth",names.arg = c("50 cm", "100 cm","150 cm"),ylab="NO3")
arrows(mean, cbind(mean_50,mean_100,mean_150)-cbind(se_50,se_100,se_150),
mean, cbind(mean_50,mean_100,mean_150)+cbind(se_50,se_100,se_150),angle=90,code=3)
legend("topleft",
legend = levels(dataall$Treatment),
fill = grey.colors(4),horiz = T)
box()
#2018
mean_50<-with(data2018, tapply(data2018$NO3_50, data2018$Treatment, mean))
mean_100<-with(data2018, tapply(data2018$NO3_100, data2018$Treatment, mean))
mean_150<-with(data2018, tapply(data2018$NO3_150, data2018$Treatment, mean))
sd_50<-with(data2018, tapply(data2018$NO3_50, data2018$Treatment, sd))
sd_100<-with(data2018, tapply(data2018$NO3_100, data2018$Treatment, sd))
sd_150<-with(data2018, tapply(data2018$NO3_150, data2018$Treatment, sd))
se_50<-with(data2018, tapply(data2018$NO3_50, data2018$Treatment, se))
se_100<-with(data2018, tapply(data2018$NO3_100, data2018$Treatment, se))
se_150<-with(data2018, tapply(data2018$NO3_150, data2018$Treatment, se))
mean <- barplot(cbind(mean_50,mean_100,mean_150),beside = T,ylim = c(0,350),
xaxt='n', ann=FALSE,yaxt='n')
grid()
par(new=T)
mean <- barplot(cbind(mean_50,mean_100,mean_150),beside = T,ylim = c(0,350),
xlab="depth",names.arg = c("50 cm", "100 cm","150 cm"),ylab="NO3")
arrows(mean, cbind(mean_50,mean_100,mean_150)-cbind(se_50,se_100,se_150),
mean, cbind(mean_50,mean_100,mean_150)+cbind(se_50,se_100,se_150),angle=90,code=3)
legend("topleft",
legend = levels(dataall$Treatment),
fill = grey.colors(4),horiz = T)
box()
#2019
mean_50<-with(data2019, tapply(data2019$NO3_50, data2019$Treatment, mean))
mean_100<-with(data2019, tapply(data2019$NO3_100, data2019$Treatment, mean))
mean_150<-with(data2019, tapply(data2019$NO3_150, data2019$Treatment, mean))
sd_50<-with(data2019, tapply(data2019$NO3_50, data2019$Treatment, sd))
sd_100<-with(data2019, tapply(data2019$NO3_100, data2019$Treatment, sd))
sd_150<-with(data2019, tapply(data2019$NO3_150, data2019$Treatment, sd))
se_50<-with(data2019, tapply(data2019$NO3_50, data2019$Treatment, se))
se_100<-with(data2019, tapply(data2019$NO3_100, data2019$Treatment, se))
se_150<-with(data2019, tapply(data2019$NO3_150, data2019$Treatment, se))
mean <- barplot(cbind(mean_50,mean_100,mean_150),beside = T,ylim = c(0,350),
xaxt='n', ann=FALSE,yaxt='n')
grid()
par(new=T)
mean <- barplot(cbind(mean_50,mean_100,mean_150),beside = T,ylim = c(0,350),
xlab="depth",names.arg = c("50 cm", "100 cm","150 cm"),ylab="NO3")
arrows(mean, cbind(mean_50,mean_100,mean_150)-cbind(se_50,se_100,se_150),
mean, cbind(mean_50,mean_100,mean_150)+cbind(se_50,se_100,se_150),angle=90,code=3)
legend("topleft",legend = levels(dataall$Treatment),
fill = grey.colors(4),horiz = T)
box()
mean <- barplot(cbind(mean_50,mean_100,mean_150),beside = T,ylim = c(0,350),
xaxt='n', ann=FALSE,yaxt='n')
mean <- barplot(cbind(mean_50,mean_100,mean_150),beside = T,ylim = c(0,350),
xlab="depth",names.arg = c("50 cm", "100 cm","150 cm"),ylab="NO3")
arrows(mean, cbind(mean_50,mean_100,mean_150)-cbind(se_50,se_100,se_150),
mean, cbind(mean_50,mean_100,mean_150)+cbind(se_50,se_100,se_150),angle=90,code=3)
legend("topleft",
legend = levels(dataall$Treatment),
fill = grey.colors(4),horiz = T)
mean <- barplot(cbind(mean_50,mean_100,mean_150),beside = T,ylim = c(0,250),
xaxt='n', ann=FALSE,yaxt='n')
grid()
par(new=T)
mean <- barplot(cbind(mean_50,mean_100,mean_150),beside = T,ylim = c(0,350),
xlab="depth",names.arg = c("50 cm", "100 cm","150 cm"),ylab="NO3")
arrows(mean, cbind(mean_50,mean_100,mean_150)-cbind(se_50,se_100,se_150),
mean, cbind(mean_50,mean_100,mean_150)+cbind(se_50,se_100,se_150),angle=90,code=3)
mean <- barplot(cbind(mean_50,mean_100,mean_150),beside = T,ylim = c(0,250),
xaxt='n', ann=FALSE,yaxt='n')
grid()
par(new=T)
mean <- barplot(cbind(mean_50,mean_100,mean_150),beside = T,ylim = c(0,250),
xlab="depth",names.arg = c("50 cm", "100 cm","150 cm"),ylab="NO3")
arrows(mean, cbind(mean_50,mean_100,mean_150)-cbind(se_50,se_100,se_150),
mean, cbind(mean_50,mean_100,mean_150)+cbind(se_50,se_100,se_150),angle=90,code=3)
legend("topleft",
legend = levels(dataall$Treatment),
fill = grey.colors(4),horiz = T)
pdf("kari_julsgaard_plot_2.pdf", width=11.6, height=8.2)
par(mfrow=c(3,1))
mean_50<-with(dataall, tapply(dataall$NO3_50, dataall$Treatment, mean))
mean_100<-with(dataall, tapply(dataall$NO3_100, dataall$Treatment, mean))
mean_150<-with(dataall, tapply(dataall$NO3_150, dataall$Treatment, mean))
se <- function(x, ...) sqrt(var(x, ...)/length(x))
sd_50<-with(dataall, tapply(dataall$NO3_50, dataall$Treatment, sd))
sd_100<-with(dataall, tapply(dataall$NO3_100, dataall$Treatment, sd))
sd_150<-with(dataall, tapply(dataall$NO3_150, dataall$Treatment, sd))
se_50<-with(dataall, tapply(dataall$NO3_50, dataall$Treatment, se))
se_100<-with(dataall, tapply(dataall$NO3_100, dataall$Treatment, se))
se_150<-with(dataall, tapply(dataall$NO3_150, dataall$Treatment, se))
mean <- barplot(cbind(mean_50,mean_100,mean_150),beside = T,ylim = c(0,350),
xaxt='n', ann=FALSE,yaxt='n')
grid()
par(new=T)
mean <- barplot(cbind(mean_50,mean_100,mean_150),beside = T,ylim = c(0,350),
xlab="depth",names.arg = c("50 cm", "100 cm","150 cm"),ylab="NO3")
arrows(mean, cbind(mean_50,mean_100,mean_150)-cbind(se_50,se_100,se_150),
mean, cbind(mean_50,mean_100,mean_150)+cbind(se_50,se_100,se_150),angle=90,code=3)
legend("topleft",
legend = levels(dataall$Treatment),
fill = grey.colors(4),horiz = T)
box()
#2018
mean_50<-with(data2018, tapply(data2018$NO3_50, data2018$Treatment, mean))
mean_100<-with(data2018, tapply(data2018$NO3_100, data2018$Treatment, mean))
mean_150<-with(data2018, tapply(data2018$NO3_150, data2018$Treatment, mean))
sd_50<-with(data2018, tapply(data2018$NO3_50, data2018$Treatment, sd))
sd_100<-with(data2018, tapply(data2018$NO3_100, data2018$Treatment, sd))
sd_150<-with(data2018, tapply(data2018$NO3_150, data2018$Treatment, sd))
se_50<-with(data2018, tapply(data2018$NO3_50, data2018$Treatment, se))
se_100<-with(data2018, tapply(data2018$NO3_100, data2018$Treatment, se))
se_150<-with(data2018, tapply(data2018$NO3_150, data2018$Treatment, se))
mean <- barplot(cbind(mean_50,mean_100,mean_150),beside = T,ylim = c(0,350),
xaxt='n', ann=FALSE,yaxt='n')
grid()
par(new=T)
mean <- barplot(cbind(mean_50,mean_100,mean_150),beside = T,ylim = c(0,350),
xlab="depth",names.arg = c("50 cm", "100 cm","150 cm"),ylab="NO3")
arrows(mean, cbind(mean_50,mean_100,mean_150)-cbind(se_50,se_100,se_150),
mean, cbind(mean_50,mean_100,mean_150)+cbind(se_50,se_100,se_150),angle=90,code=3)
legend("topleft",
legend = levels(dataall$Treatment),
fill = grey.colors(4),horiz = T)
box()
#2019
mean_50<-with(data2019, tapply(data2019$NO3_50, data2019$Treatment, mean))
mean_100<-with(data2019, tapply(data2019$NO3_100, data2019$Treatment, mean))
mean_150<-with(data2019, tapply(data2019$NO3_150, data2019$Treatment, mean))
sd_50<-with(data2019, tapply(data2019$NO3_50, data2019$Treatment, sd))
sd_100<-with(data2019, tapply(data2019$NO3_100, data2019$Treatment, sd))
sd_150<-with(data2019, tapply(data2019$NO3_150, data2019$Treatment, sd))
se_50<-with(data2019, tapply(data2019$NO3_50, data2019$Treatment, se))
se_100<-with(data2019, tapply(data2019$NO3_100, data2019$Treatment, se))
se_150<-with(data2019, tapply(data2019$NO3_150, data2019$Treatment, se))
mean <- barplot(cbind(mean_50,mean_100,mean_150),beside = T,ylim = c(0,350),
xaxt='n', ann=FALSE,yaxt='n')
grid()
par(new=T)
mean <- barplot(cbind(mean_50,mean_100,mean_150),beside = T,ylim = c(0,350),
xlab="depth",names.arg = c("50 cm", "100 cm","150 cm"),ylab="NO3")
arrows(mean, cbind(mean_50,mean_100,mean_150)-cbind(se_50,se_100,se_150),
mean, cbind(mean_50,mean_100,mean_150)+cbind(se_50,se_100,se_150),angle=90,code=3)
legend("topleft",legend = levels(dataall$Treatment),
fill = grey.colors(4),horiz = T)
box()
dev.off()
Sys.setlocale(category = "LC_ALL", locale = "English_United States.1252")
rm(list = ls())
labels_2 <- data.frame(matrix(nrow=12,ncol=4))
names(labels_2) = c("number","depth","subplot","species")
labels_2[1,] <- c("T1","-5","A1","2018 Festulolium")
labels_2[2,] <- c("T2","-20","A1","2018 Festulolium")
labels_2[3,] <- c("T3","-5","Out","2018 Festulolium")
labels_2[4,] <- c("T4","-20","Out","2018 Festulolium")
labels_2[5,] <- c("T5","-5","A2","2018 Festulolium")
labels_2[6,] <- c("T6","-20","A2","2018 Festulolium")
labels_2[7,] <- c("T7","-5","A3","2012 Festulolium")
labels_2[8,] <- c("T8","-20","A3","2012 Festulolium")
labels_2[9,] <- c("T9","-5","Out","2012 Festulolium")
labels_2[10,] <- c("T10","-20","Out","2012 Festulolium")
labels_2[11,] <- c("T11","-5","A4","2012 Festulolium")
labels_2[12,] <- c("T12","-20","A4","2012 Festulolium")
labels_1 <- data.frame(matrix(nrow=12,ncol=4))
names(labels_1) = c("number","depth","subplot","species")
labels_1[1,] <- c("T13","-5","Out","GrassClover")
labels_1[2,] <- c("T14","-20","Out","GrassClover")
labels_1[3,] <- c("T15","-5","Out","GrassClover")
labels_1[4,] <- c("T16","-20","Out","GrassClover")
labels_1[5,] <- c("T17","-5","Out","GrassClover")
labels_1[6,] <- c("T18","-20","Out","GrassClover")
labels_1[7,] <- c("T19","-5","A5","Triticale")
labels_1[8,] <- c("T20","-20","A5","Triticale")
labels_1[9,] <- c("T21","-5","Out","Triticale")
labels_1[10,] <- c("T22","-20","Out","Triticale")
labels_1[11,] <- c("T23","-5","A6","Triticale")
labels_1[12,] <- c("T24","-20","A6","Triticale")
# functions ------------------------------------------------------------
plotting_all_TDR_NEW <- function(x,label=NULL){
x <- x[,c(5:16,65)]
for(i in 1:12){
minimum=floor(min(as.numeric(x[,1]),as.numeric(x[,2]),as.numeric(x[,3]),as.numeric(x[,4]),as.numeric(x[,5]),as.numeric(x[,6]),as.numeric(x[,7]),as.numeric(x[,8]),as.numeric(x[,9]),as.numeric(x[,10]),as.numeric(x[,11]),as.numeric(x[,12]),na.rm = T))
maximum=ceiling(max(as.numeric(x[,1]),as.numeric(x[,2]),as.numeric(x[,3]),as.numeric(x[,4]),as.numeric(x[,5]),as.numeric(x[,6]),as.numeric(x[,7]),as.numeric(x[,8]),as.numeric(x[,9]),as.numeric(x[,10]),as.numeric(x[,11]),as.numeric(x[,12]),na.rm = T))
names(x) <- c(paste("T",seq(1:12),sep=""),"date")
jpeg(filename = paste(i,".jpg",sep=""))
plot(x$date,x[,i],xlab="Time",ylab= "%",type="b",ylim=c(minimum,maximum),main = label[i,])
dev.off()
}
}
plotting_all_temp <- function(x,label=NULL){
x <- x[,c(17:28,65)]
for(i in 1:12){
minimum=floor(min(as.numeric(x[,1]),as.numeric(x[,2]),as.numeric(x[,3]),as.numeric(x[,4]),as.numeric(x[,5]),as.numeric(x[,6]),as.numeric(x[,7]),as.numeric(x[,8]),as.numeric(x[,9]),as.numeric(x[,10]),as.numeric(x[,11]),as.numeric(x[,12]),na.rm = T))
maximum=ceiling(max(as.numeric(x[,1]),as.numeric(x[,2]),as.numeric(x[,3]),as.numeric(x[,4]),as.numeric(x[,5]),as.numeric(x[,6]),as.numeric(x[,7]),as.numeric(x[,8]),as.numeric(x[,9]),as.numeric(x[,10]),as.numeric(x[,11]),as.numeric(x[,12]),na.rm = T))
names(x) <- c(paste("T",seq(1:12),sep=""),"date")
jpeg(filename = paste(i,".jpg",sep=""))
plot(x$date,x[,i],xlab="Time",ylab= "Temperature (degrees C)",type="b",ylim=c(minimum,maximum),main = label[i,])
dev.off()
}
}
plotting_all_Quantum <- function(x){
for(i in 2:ncol(x)){
jpeg(filename = paste(i,".jpg",sep=""))
plot(x$date,x[,i],xlab="Time",ylab=names(x)[i],type="b")
dev.off()
}
}
# MARK 2.1 -------------------------------------------------------------
setwd("//DFS05.UNI.AU.DK//dfs//Tech_AGRO//Klima//JWMP//Meteo_figures_Foulum//github//ANAEE_DK_Foulum//Mark_2_1//TDR//")
Mark_2_1_TDR <- read.csv("//DFS05.UNI.AU.DK//dfs//Tech_AGRO//Foulumgaard\\AnaEE\\Campbell\\Mark2.1+Router_TDR_Field2_1.dat",skip=1,as.is=T)
Mark_2_1_TDR <- Mark_2_1_TDR[3:nrow(Mark_2_1_TDR),]
Mark_2_1_TDR$TIMESTAMP <- as.POSIXct(Mark_2_1_TDR$TIMESTAMP,format="%Y-%m-%d %H:%M:%OS")
data <- fRequent::zootodf(Mark_2_1_TDR[,2:ncol(Mark_2_1_TDR)])
data$date <- Mark_2_1_TDR$TIMESTAMP
date_now <- Sys.Date()
oneweek <- date_now-7
data$pure_date <- as.Date(data$date)+1
subdata <- data[max(which(data$pure_date==oneweek),1):max(which(data$pure_date==date_now)),]
labels_1 <- cbind(labels_1,subdata$pure_date[nrow(subdata)])
labels_1$`subdata$pure_date[nrow(subdata)]` <- as.character(labels_1$`subdata$pure_date[nrow(subdata)]`)
plotting_all_TDR_NEW(x = subdata,label = labels_1)
setwd("//DFS05.UNI.AU.DK//dfs//Tech_AGRO//Klima//JWMP//Meteo_figures_Foulum//github//ANAEE_DK_Foulum//Mark_2_1//Temp//")
plotting_all_temp(x = subdata,label = labels_1)
###########################
setwd("//DFS05.UNI.AU.DK//dfs//Tech_AGRO//Klima//JWMP//Meteo_figures_Foulum//github//ANAEE_DK_Foulum//Mark_2_1//Quantum//")
Mark_2_1_Quantum <- read.csv("//DFS05.UNI.AU.DK//dfs//Tech_AGRO//Foulumgaard\\AnaEE\\Campbell\\Mark2.1+Router_Quantum_Field2_1.dat",skip=1,as.is=T)
Mark_2_1_Quantum <- Mark_2_1_Quantum[3:nrow(Mark_2_1_Quantum),]
Mark_2_1_Quantum$TIMESTAMP <- as.POSIXct(Mark_2_1_Quantum$TIMESTAMP,format="%Y-%m-%d %H:%M:%OS")
data <- fRequent::zootodf(Mark_2_1_Quantum[,2:ncol(Mark_2_1_Quantum)])
data$date <- Mark_2_1_Quantum$TIMESTAMP
date_now <- Sys.Date()
oneweek <- date_now-7
date <- as.Date(data$date)+1
subdata <- data[max(which(date==oneweek),1):max(which(date==date_now),date_now),]
plotting_all_Quantum(subdata)
# MARK 2.2 -------------------------------------------------------------
setwd("//DFS05.UNI.AU.DK//dfs//Tech_AGRO//Klima//JWMP//Meteo_figures_Foulum//github//ANAEE_DK_Foulum//Mark_2_2//TDR//")
Mark_2_2_TDR <- read.csv("//DFS05.UNI.AU.DK//dfs//Tech_AGRO//Foulumgaard\\AnaEE\\Campbell\\Mark 2.2 igennem mark 2.1_TDR_Field2_2.dat",skip=1,as.is=T)
Mark_2_2_TDR <- Mark_2_2_TDR[3:nrow(Mark_2_2_TDR),]
Mark_2_2_TDR$TIMESTAMP <- as.POSIXct(Mark_2_2_TDR$TIMESTAMP,format="%Y-%m-%d %H:%M:%OS")
data <- fRequent::zootodf(Mark_2_2_TDR[,2:ncol(Mark_2_2_TDR)])
data$date <- Mark_2_2_TDR$TIMESTAMP
date_now <- Sys.Date()
oneweek <- date_now-7
data$pure_date <- as.Date(data$date)+1
subdata <- data[max(which(data$pure_date==oneweek),1):max(which(data$pure_date==date_now)),]
labels_2 <- cbind(labels_2,subdata$pure_date[nrow(subdata)])
labels_2$`subdata$pure_date[nrow(subdata)]` <- as.character(labels_2$`subdata$pure_date[nrow(subdata)]`)
plotting_all_TDR_NEW(x = subdata,label = labels_2)
setwd("//DFS05.UNI.AU.DK//dfs//Tech_AGRO//Klima//JWMP//Meteo_figures_Foulum//github//ANAEE_DK_Foulum//Mark_2_2//Temp//")
plotting_all_temp(x = subdata,label = labels_2)
# ###########################
setwd("//DFS05.UNI.AU.DK//dfs//Tech_AGRO//Klima//JWMP//Meteo_figures_Foulum//github//ANAEE_DK_Foulum//Mark_2_2//Quantum//")
Mark_2_2_Quantum <- read.csv("//DFS05.UNI.AU.DK//dfs//Tech_AGRO//Foulumgaard\\AnaEE\\Campbell\\Mark 2.2 igennem mark 2.1_Quantum_Field2_2.dat",skip=1,as.is=T)
Mark_2_2_Quantum <- Mark_2_2_Quantum[3:nrow(Mark_2_2_Quantum),]
Mark_2_2_Quantum$TIMESTAMP <- as.POSIXct(Mark_2_2_Quantum$TIMESTAMP,format="%Y-%m-%d %H:%M:%OS")
data <- fRequent::zootodf(Mark_2_2_Quantum[,2:ncol(Mark_2_2_Quantum)])
data$date <- Mark_2_2_Quantum$TIMESTAMP
date_now <- Sys.Date()
oneweek <- date_now-7
data$pure_date <- as.Date(data$date)+1
subdata <- data[max(which(data$pure_date==oneweek),1):max(which(data$pure_date==date_now),date_now),]
plotting_all_Quantum(subdata)
setwd("O:\\Tech_AGRO\\Klima\\JWMP\\Meteo_figures_Foulum\\github\\ANAEE_DK_Foulum")
system("O:\\Tech_AGRO\\Klima\\JWMP\\Meteo_figures_Foulum\\github\\ANAEE_DK_Foulum\\push_git.cmd")
Mark_2_1_Quantum
tail(Mark_2_1_Quantum)
tail(Mark_2_1_TDR)
tail(Mark_2_1_TDR,10)
